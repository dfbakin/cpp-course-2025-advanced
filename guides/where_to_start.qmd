---
title: "С чего начать?"
format:
  html:
    math: true
    page-layout: full
---


# С чего начать?

Начать стоит с настройки IDE — среды разработки, которая позволит писать код, компилировать и запускать программы, заниматься тестированием.

Варианты сред разработки:

- Visual Studio Code (инструкция будет приложена ниже) — первый вариант на курсе

- Visual Studio (нужна регистрация microsoft)

- [repl.it](http://repl.it) (онлайн IDE, поддерживает многофайловые сборки)

- [onlinegdb.com](http://onlinegdb.com) (онлайн компилятор)

- [cpp.sh](http://cpp.sh) (онлайн компилятор)



# Среда разработки

[Инструкция для установки Visual Studio Code](https://code.visualstudio.com/docs/languages/cpp) — оригинальная, но на английском языке. В ней нужно обратить внимание на установку компилятора — это то, что сделает из написанной текстовой программы исполняемый файл. В зависимости от вашей ОС нужно установить разные компиляторы (это указанно в инструкции).

Основные шаги установки:

- установить VS Code

- скачать расширение [Microsoft C/C++ extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) (это можно сделать по нажатию на значок магазина расширений слева в VS Code)

- установить компилятор (MSVC для Windows, gcc для linux или clang для MacOS)

- создать файл `helloworld.cpp`, который содержит минимально компилируемую программу с выводом (есть в конспекте первой лекции)

- запустить файл, нажав кнопки Run C/C++, посмотреть на вывод консоли, убедиться, что все работает

- при возникновении ошибок свериться с инструкцией, по которой ставили, прогуглить ошибки, повторить 2-3 раза гугл-запросы, потом написать в общий чат за помощью — будем разбираться



# Скрины в помощь

Как выглядит программа:

![image.png](/resources/images/vs_code_demo_1.png)



Нажимаем:

![image (1).png](/resources/images/vs_code_demo_2.png)



Выбираем установленный компилятор:

![image (2).png](/resources/images/vs_code_demo_3.png)



Видим вывод в консоль “Hello, world!”:

![image (3).png](/resources/images/vs_code_demo_4.png)



Или ошибку компиляции, если что-то написали не так. Там же есть описание ошибки и подсказки, как это можно исправить:

![image (4).png](/resources/images/vs_code_demo_5.png)



# “Да как решать эти ваши задачи?”

![image (5).png](/resources/images/informatics_2937_1.png)

Разберем ход рассуждения для такой задачи.



### 1. Понять суть задачи

Сначала надо понять, что от нас хотят: тут все ясно, хотим вывести числа, которые на единицу больше и меньше некоторого нашего N. Размышляем, приходим к тому, что предыдущее число — $N - 1$ , следующее — $N + 1$



### 2. Входные данные

Это то, что нам вводят через консоль. Нам важно количество входных данных, их смысл и сих тип. Например, здесь вводится ЦЕЛОЕ число, оно меньше 10000, значит, поместится в тип `int` . Запоминаем одна переменная типа int



### 3. Выходные данные

Это то, что программа должна вывести в консоль. Здесь нам очень важен формат того, кто и как надо вывести. В данном случае это некоторые фразы, в которые мы должны вставить какие-то значения



### 4. Пишем программу в файле <filename>.cpp

```cpp
#include <iostream>


int main() {
    int n;
    std::cin >> n;
    std::cout << "The next number for the number " << n << " is " << n + 1 << ".\n";
    std::cout << "The previous number for the number " << n << " is " << n - 1 << ".\n";
}
```

Альтернативно применяем составное форматирование:

```cpp
#include <iostream>


int main() {
    int n;
    std::cin >> n;
    printf("The next number for the number %d is %d.\n", n, n + 1);
    printf("The previous number for the number %d is %d.\n", n, n - 1);
}
```



### 5. Тестируем программу

Запускаем программу и вводим консоль тесты из условия, смотрим на вывод. Исправляем ошибки в коде, если что-то выводится не так. Обращайте внимание на переносы строк, пробелы.



### 6. Отправляем на тестирование, исправляем

Нажимаем “Выбор файла”, выбираем файл, нажимаем “Отправить”, ждем, потом нажимаем “Обновить” несколько раз, пока ваша посылка не получит вердикт. Если прошли все тесты — поздравляю. Если нет — придумываем свои тесты и ищем, почему не работает программа.

![image (6).png](/resources/images/informatics_2937_2.png)
